% This file was created with JabRef 2.4.
% Encoding: Cp1252

@STRING{LICS = {Logic in Computer Science}}

@ARTICLE{Andreoli:JLC92,
author = {Andreoli, Jean-Marc}, 
title = {Logic Programming with Focusing Proofs in Linear Logic},
volume = {2}, 
number = {3}, 
pages = {297--347}, 
year = {1992}, 
doi = {10.1093/logcom/2.3.297}, 
abstract = {The deep symmetry of linear logic [18] makes it suitable
                  for providing abstract models of computation, free
                  from implementation details which are, by nature,
                  oriented and non-symmetrical. I propose here one
                  such model, in the area of logic programming, where
                  the basic computational priciple isComputation =
                  Proof searchProofs cinsidered here are those of the
                  Gentzen style sequent calculus for linear
                  logic. However, proofs in this system may be
                  redundant, in that two proofs canbe syntactically
                  different although identical up to some irrelevant
                  reordering or simplification of the applications of
                  the inferences rules. This leads to an untractable
                  proof search where the search procedure is forced to
                  make costly choices whch turn out to be
                  irrelevant. To overcome this problem, a subclass of
                  proofs, called the `focusing' proofs, which is both
                  complete (any derivable formla in linear logic has a
                  focusing proof) and tractable (many irrelevant
                  choices in the search are eliminated when aimed at
                  focusing proofs) is identified. The main constraint
                  underlying the specificatuon of focusing proofs has
                  been to preserve the symmetry of linear logic, which
                  is its most salient feature. In particular, dual
                  connectives have dual properties with respect to
                  focusing proofsThen, a progrmming language, called
                  LinLog, consisting of a fragment of linear logic, in
                  which focussing proofs have a more compact form, is
                  presented. Linlog deals with formulae which have a
                  syntax similar to the of the definite clauses and
                  goals of Horn logic, but the crucial difference here
                  is that it allows clauses with multiple atoms in the
                  head, connected by the `par' (multiplicative
                  disjuction). It is then shown that the syntyactic
                  restriction induced by LinLog is not performed at
                  the cost of any expressive power: a mapping from
                  full linear logic to LinLog, preserving focusing
                  proofs, and analogous to the normalization to
                  clausal form for classical logic, is presented.}, 
URL = {http://logcom.oxfordjournals.org/content/2/3/297.abstract}, 
eprint = {http://logcom.oxfordjournals.org/content/2/3/297.full.pdf+html}, 
journal = {Journal of Logic and Computation} 
}

@TECHREPORT{Chang+:CMU03,
  author = {Chang, Bor-Yuh Evan and Chaudhuri, Kaustuv and Pfenning, Frank},
  title = {A Judgmental Analysis of Linear Logic},
  number = {CMU-CS-03-131R},
  institution = {Computer Science Department, Carnegie Mellon University},
  month = apr,
  year = 2003,
  note = {Revised December 2003},
}

@INPROCEEDINGS{Hanus:Ganzinger13,
  author = {Hanus, Michael},
  title = {Functional Logic Programming: From Theory to {Curry}},
  booktitle = {Programming Logics -- Essays in Memory of Harald Ganzinger},
  year = {2013},
  volume = {7797},
  series = {LNCS},
  pages = {123--168},
  publisher = {Springer},
  timestamp = {2013.09.24}
}

@INBOOK{Howard:Curry80,
  chapter = {The Formulae-as-Types Notion of Construction},
  pages = {479--490},
  title = {To {H.B.\ Curry}: {Essays} on Combinatory Logic, Lambda Calculus, and Formalism},
  publisher = {Academic Press},
  year = {1980},
  editor = {Seldin, Jonathan P. and Hindley, J.\ Roger},
  author = {Howard, William A.},
  address = {Boston},
  timestamp = {2013.09.29}
}

@INCOLLECTION{Martin-Lof:LMPS80,
  author = {Martin-L{\"o}f, Per},
  title = {Constructive Mathematics and Computer Programming},
  booktitle = {Logic, Methodology and Philosophy of Science {VI}},
  publisher = {North-Holland},
  year = {1980},
  pages = {153--175},
}

@ARTICLE{Miller+:PAL91,
  author = {Miller, Dale and Nadathur, Gopalan and Pfenning, Frank and Scedrov, Andre},
  title = {Uniform Proofs as a Foundation for Logic Programming},
  journal = {Annals of Pure and Applied Logic},
  year = {1991},
  volume = {51},
  pages = {125--157},
  number = {1--2},
  abstract = {A proof-theoretic characterization of logical languages
                  that form suitable bases for Prolog-like programming
                  languages is provided.  This characterization is
                  based on the principle that the declarative meaning
                  of a logic program, provided by provability in a
                  logical system, should coincide with its operational
                  meaning, provided by interpreting logical
                  connectives as simple and fixed search
                  instructions. The operational semantics is
                  formalized by the identification of a class of
                  cut-free sequent proofs called uniform proofs. A
                  uniform proof is one that can be found by a
                  goal-directed search that respects the
                  interpretation of the logical connectives as search
                  instructions. The concept of a uniform proof is used
                  to define the notion of an abstract logic
                  programming language, and it is shown that
                  first-order and higher-order Horn clauses with
                  classical provability are examples of such a
                  language. Horn clauses are then generalized to
                  hereditary Harrop formulas and it is shown that
                  first-order and higher-order versions of this new
                  class of formulas are also abstract logic
                  programming languages if the inference rules are
                  those of either intuitionistic or minimal logic. The
                  programming language significance of the various
                  generalizations to first-order Horn clauses is
                  briefly discussed. },
  doi = {http://dx.doi.org/10.1016/0168-0072(91)90068-W},
  issn = {0168-0072},
  url = {http://www.sciencedirect.com/science/article/pii/016800729190068W}
}

@INPROCEEDINGS{Schack-Nielsen+Schuermann:IJCAR08,
  author = {Schack-Nielsen, Anders and Sch{\"u}rmann, Carsten},
  title = {{Celf} -- {A} Logical Framework for Deductive and Concurrent Systems (System Description)},
  booktitle = {Proceedings of the International Joint Conference on Automated Reasoning (IJCAR'08)},
  pages = {320--326},
  year = {2008},
  publisher = {Springer LNCS 5195},
}

@PHDTHESIS{Schack-Nielsen:ITU11,
  author = {Schack-Nielsen, Anders},
  title = {Implementing Substructural Logical Frameworks},
  school = {IT University of Copenhagen},
  year = {2011},
}

@INPROCEEDINGS{Simmons+Zerny:LICS13,
  author = {Simmons, Robert J. and Zerny, Ian},
  title = {A Logical Correspondence between Natural Semantics and Abstract Machines},
  booktitle = {Proceedings of the 28th Annual {ACM}/{IEEE} Symposium on Logic in
	Computer Science},
  year = 2013,
  timestamp = {2013.09.23}
}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:}

