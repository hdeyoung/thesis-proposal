% Henry DeYoung's macros for user-defined predicates
% October 18, 2013
\RequirePackage{expl3}
\ProvidesExplPackage{predicates}{2013/09/04}{0.01}{}


\RequirePackage{amsmath}

\cs_generate_variant:Nn \tl_set_rescan:Nnn { NnV }

\keys_define:nn { predicates } {
  font .tl_set:N = \l__predicates_font_tl ,
  font .value_required:                   ,
  %
  decoration .tl_set:N        = \l__predicates_decoration_tl ,
  decoration .value_required:                                ,
  decoration .initial:n       = {}                           ,
  %
  before .tl_set:N        = \l__predicates_before_tl ,
  before .value_required:                            ,
  before .initial:n       = {}                       ,
  after  .tl_set:N        = \l__predicates_after_tl  ,
  after  .value_required:                            ,
  after  .initial:n       = {}                       ,
  %
  unknown .code:n = {
    \tl_set_rescan:NnV \l_tmpa_tl
      {
        \char_set_catcode_math_subscript:N _
        \char_set_catcode_math_superscript:N ^
      }
      \l_keys_key_tl
    % \tl_put_right:NV \l__predicates_decoration_tl \l_tmpa_tl
    \tl_set:NV \l__predicates_decoration_tl \l_tmpa_tl
  },
  %
  default~options .meta:n = {
    before = {} , after = {} ,
    font = \mathsf           , 
    decoration = {}
  },
  default~options .value_forbidden: ,
}

\msg_new:nnn { predicates } { wrong_arity } {
  Use~of~\token_to_str:N #1 did~not~match~declared~arity.~
  Expected~#2~arguments,~but~received~#3~instead:~
  #4.
}

\cs_new_protected:Npn \__predicates_make:NNNnnn #1#2#3#4#5#6 {
  #2 { __predicates_\cs_to_str:N#3:nn } ##1##2 {
    \keys_set:nn { predicates } { default~options , #5, ##1 }

    % Pre-hook
    \tl_use:N \l__predicates_before_tl

    % Predicate name
    \tl_use:N \l__predicates_font_tl
      { #4 \tl_use:N \l__predicates_decoration_tl }

    % Predicate arguments
    \tl_if_empty:nTF {##2}
      { \seq_set_eq:NN \l_tmpa_seq \c_empty_seq }
      { \seq_set_split:Nnn \l_tmpa_seq { , } {##2} }

    \bool_if:nTF { \seq_if_empty_p:N \l_tmpa_seq  ||
                   \int_compare_p:n {
                     \seq_count:N \l_tmpa_seq == #6 } } {
      \seq_map_inline:Nn \l_tmpa_seq { \,####1 }
    } {
      \msg_error:nnxxxx { predicates } { wrong_arity }
        {#3}
        {#6} { \seq_count:N \l_tmpa_seq }
        { \seq_use:Nn \l_tmpa_seq { ,~ } }
    }
    
    % Post-hook
    \tl_use:N \l__predicates_after_tl
  }

  \int_compare:nTF { #6 == 0 } {
    #1 #3 { O{} } {
      \use:c { __predicates_ \cs_to_str:N #3 :nn } {##1} {}
    }
  } {
    #1 #3 { O{} m } {
      \use:c { __predicates_ \cs_to_str:N #3 :nn } {##1} {##2}
    }
  }
}

% \seq_new:N \l__predicates_arg_seq

\cs_generate_variant:Nn \__predicates_make:NNNnnn { NNNfnn }

\NewDocumentCommand{\NewPredicate}{m o O{} m}{
  \__predicates_make:NNNfnn
    \NewDocumentCommand
    \cs_new_protected:cpn
    #1
    { \IfValueTF {#2} {#2} { \cs_to_str:N #1 } }
    {#3}
    {#4}
}

\NewDocumentCommand{\RenewPredicate}{m o O{} m}{
  \__predicates_make:NNNfnn
    \RenewDocumentCommand
    \cs_gset_protected:cpn
    #1
    { \IfValueTF {#2} {#2} { \cs_to_str:N #1 } }
    {#3}
    {#4}
}







\RequirePackage{pgf}


\cs_new:Npn \compose_fn:nnn #1#2#3 {
  #1 { #2 {#3} }
}

\cs_new:Npn \__use_pair_inline_fn:nn #1 {#1}
\cs_new:Npn \use_pair_inline:nnn #1#2#3 {
  \cs_set:Npn \__use_pair_inline_fn:nn ##1##2 {#3}
  \__use_pair_inline_fn:nn {#1} {#2}
}


\clist_map_inline:nn { {left}{before} , {right}{after} } {
  \use_pair_inline:nnn #1 {
    \keys_define:nn { predicates } {
      ##1 .code:n = {
        \tl_if_empty:nF {####1} {
          \tl_put_right:cn { l__predicates_##2_tl } { \__predicates_type:n {####1} }
        }
      } ,
      ##1 .value_required: ,
    }
  }
}

\cs_new_protected:Npn \__predicates_type:n #1 {
  \begin{pgfpicture}
    \pgfsetbaseline{0pt}
    \pgfsetstrokecolor{#1}
    \pgfsetlinewidth{1.2pt}
    \pgfpathmoveto{\pgfpointorigin}
    \pgfpathlineto{\pgfpoint{0pt}{1.5ex}}
    \pgfusepath{stroke}
  \end{pgfpicture}
}

\keys_define:nn { predicates } {
  types .code:n = {
    \use_pair_inline:nnn #1
      { \keys_set:nn { predicates } { left = ##1 , right = ##2 } }
  } ,
  types .value_required: ,
}








\cs_new:Npn \__predicates_make_arrow_key:nn #1#2 {
  \keys_define:nn { predicates } {
    #1 .choices:nn =
      { {} , * }
      {
        \tl_put_left:Nn \l__predicates_font_tl
          { \compose_fn:nnn { \exp_last_unbraced:NV \pgfunderline \l_keys_choice_tl {#2} } }
      },
    #1 .default:n = {} ,
  }
}

\clist_map_inline:nn
  { {<-}{stealth-} , {->}{-stealth} , {-}{-} }
  { \__predicates_make_arrow_key:nn #1 }




\bool_new:N \l__pgf_depth_bool
\bool_gset_false:N \l__pgf_depth_bool

\NewDocumentCommand{\pgfunderline}{s m m}{
  \IfBooleanTF {#1}
    { \bool_gset_true:N  \l__pgf_underline_keepdepth_bool }
    { \bool_gset_false:N \l__pgf_underline_keepdepth_bool }

  \mode_if_math:TF
    { \mathpalette \__pgf_underline_math:Nn { {#2} {#3} } }
    { \__pgf_underline:nnn {} {#2} {#3} }
}

\cs_new_protected_nopar:Npn \__pgf_underline_math:Nn #1#2 {
  \__pgf_underline:nnn #1 #2
}

\cs_new_protected_nopar:Npn \__pgf_underline:nnn #1#2#3 {
  #3

  \mode_if_math:TF
    { \edef\pgf@math@fam{\the\fam}
      \sbox{\pgfutil@tempboxa}{$\m@th\fam\pgf@math@fam#1#3$} }
    { \sbox{\pgfutil@tempboxa}{#3} }

  \begin{pgfpicture}
    \pgfsetbaseline{0pt}                  % "baseline = 0pt"
    \pgf@relevantforpicturesizefalse      % "overlay"
    \pgfsetroundcap                       % "line cap = round"
    \pgfsetlinewidth{0.5pt}
    \pgfsetarrows{#2}

    \pgfmathsetlength{\pgfutil@tempdima}{-3*(0.28pt+.8\pgflinewidth)-\dp\pgfutil@tempboxa}
    \pgfutil@tempdimb=\wd\pgfutil@tempboxa
    \pgfpathmoveto{\pgfqpoint{-\pgfutil@tempdimb}{\pgfutil@tempdima}}
    \pgfpathlineto{\pgfqpoint{0pt}{\pgfutil@tempdima}}
    \pgfusepath{stroke}                   % "draw"

    \bool_if:NT \l__pgf_underline_keepdepth_bool {
      \pgf@relevantforpicturesizetrue
      \pgfpathmoveto{\pgfqpoint{0pt}{\pgfutil@tempdima}}
      \pgfusepath{use~as~bounding~box}
    }
  \end{pgfpicture}
}
